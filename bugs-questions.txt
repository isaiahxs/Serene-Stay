WORKING ON:
when i try to access a spot that has been created but that was not seeder, i get "url" is undefined or something.
    -if i comment out the line in html that has "url" in it, i can then see the spot's details as well as the reviews and i can CRUD Reviews

when i try to create a spot, if i input all the correct data, i will get an error saying errors.map is not a valid function in my AddSpot component.
    -if i comment out that code and then run my code, all the error validations appear in terminal, as if i am not passing any of them

i can see spots i created in my local database, but they do not appear in my landing page


in my store.spots.js, i changed ~102 to be body: JSON.stringify(newSpot) and it seemed to get rid of one error. if i tried the same thing around ~116, i would get a 500 error saying errors: [
    'SpotImage.url cannot be null',
    'SpotImage.preview cannot be null'
  ],
  title: 'Validation error'
}
POST /api/spots/37/images 500 115.704 ms - 192



in my backend folder


-----------------------------------------------------------

am i supposed to change something for serving the static assets in the frontend's build folder? it seems we have public instead of build


owner of a spot should not be able to post a review on their own location.


need to update my seeder bulk deletes Op in things later

need to show client side validation errors when user inputs invalid data

need to add a specific case for SpotId where if user puts invalid url, they will be shown a 404

my css for log in modal got altered somehow. probably when i was doing create a spot's css and probably overlapping something of the same class or type.

need to disable non-signed in user from accessing 'host'

renamed Host/Host.js to Host/Manage because it makes more sense. getting Resource could not be found though when on url /host

IMPORTANT: for right now, i put AddSpot component in App.js just to see what it would look like. this NEEDS to be swapped with Manage component. also it seems most of the form submitted well except for lat and lng validation errors
    -edit fixed the lat lng problem i think. need to figure out url being interpreted as object or array problem
    -and also errors not being able to be mapped through

when i'm host and go to /host, fill out the form properly, the local database shows that the new spot was created. however, when i try to navigate to a spot's details, i get a 404 uncaught promise because it can't get the reviews for a spot.
    - edit i think i solved this by tweaking backend/api/routes/spots and get reviews by spot id.
    - i was returning 404 if there were no reviews instead of returning 404 when there was not a spot at that id.

something about my spotDetails is not allowing the spot to render just because the site cannot find the reviews for it.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

SOLVED:
when i'm on spot details page and i sign out, i'm getting this error:
ERROR
Cannot read properties of null (reading 'id')
TypeError: Cannot read properties of null (reading 'id')
    at http://localhost:3000/static/js/bundle.js:1377:37
    at Array.map (<anonymous>)
    at SpotId (http://localhost:3000/static/js/bundle.js:1355:33)
    at renderWithHooks (http://localhost:3000/static/js/bundle.js:25784:22)
    at updateFunctionComponent

cannot visit a spot right now without being logged in. might have something to do with sessionUser

- reason was i was trying to access 'id' of sessionUser which is null when there is no signed in user. to fix this, i had to add a check to ensure sessionUser was not null before trying to access its properties.
    -in the submitHandler, i updated userId to be userId: sessionUser?.id
    -in editSubmitHandler, i updated it as well to be userId: sessionUser?.id
    -then before rendering the reviews and edit/delete buttons, i updated the condition to check if 'sessionUser' existed before comparing the id's

---------------------------------------------------------------------------------------------

when i'm a signed in user posting a review on a spot i have not reviewed before, the User firstName and User lastName do not render immediately. a 'quick fix' is to add reviewArray or reviewState in the dependency array of the useEffect, but it causes my app to make a million calls per second.

- reason for the large number of calls was that we added reviewArray to the dep of the useEffect hook. When we add a review, reviewArray changes, causing the useEffect hook to run and fetch the updated reviews again. this in turn causes reviewArray to update once more, creating an infinite loop of fetching and updating reviews
    -to avoid this issue, we can keep track of the review count in the component state and update it when a review is added, edited, or deleted. this way, we won't need to depend on the reviewArray in the useEffect hook, and it won't trigger an infinite loop
    -first created a new state variable for the review count `const [reviewCount, setReviewCount] = useState(0);`
    -then update the reviewCount when a review is added, edited, or deleted:
        -in submitHandler, added this line after dispatching addReviewThunk: `setReviewCount(reviewCount + 1);`
        -in editSubmitHandler, added this line after dispatching updateReviewThunk:  `setReviewCount(reviewCount + 1);`
        -in deleteHandler, added this line after dispatching deleteReviewThunk: `setReviewCount(reviewCount - 1);`
        updated useEffect hook's dependency array to use reviewCount instead of reviewArray

        useEffect(() => {
            dispatch(reviewThunk(spotId));
            setReviewChanged(false);
        }, [dispatch, spotId, reviewChanged, reviewCount])

    -by implementing these changes, we updated the review count only when a review is added, edited, or deleted, preventing the infinite loop and reducing the number of calls to the server

---------------------------------------------------------------------------------------------
